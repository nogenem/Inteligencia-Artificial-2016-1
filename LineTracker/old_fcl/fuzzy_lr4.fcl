FUNCTION_BLOCK lineTracker

// Define input variables
VAR_INPUT
	left_sensor: REAL;
	right_sensor: REAL;
END_VAR

// Define output variables
VAR_OUTPUT
	left_engine: REAL;
	right_engine: REAL;
END_VAR

// Fuzzify input variable 'left_sensor': 
// 		{'leftBig', 'leftMedium', 'centred', 'rightMedium', 'rightBig'}
FUZZIFY left_sensor
	TERM rightBig := (0.5, 0) (1, 1);
	TERM rightMedium := (0.25, 0) (0.75, 1);
	TERM centred := (0, 0) (0.25, 1) (0.5, 0);
	TERM leftMedium := (-0.5, 1)(0.25, 0);
	TERM leftBig := (-1, 1) (-0.25, 0);
END_FUZZIFY

// Fuzzify input variable 'right_sensor':
// 		{'leftBig', 'leftMedium', 'centred', 'rightMedium', 'rightBig'}
FUZZIFY right_sensor
	TERM leftBig := (0.75, 0) (1.5, 1);
	TERM leftMedium := (0.25, 0) (1, 1);
	TERM centred := (0, 0) (0.25, 1) (0.5, 0);
	TERM rightMedium := (-0.25, 1)(0.25, 0);
	TERM rightBig := (-0.5, 1) (0, 0);
END_FUZZIFY

// Defuzzify output variable 'left_engine':
// 		{'bigRight', 'smallRight', 'zero', 'smallLeft', 'bigLeft'}
DEFUZZIFY left_engine
	TERM turnRightMedium := (-1.0, 1) (-0.5, 0);
	TERM turnRightSlow := (-0.75, 1) (-0.25, 0);
	TERM straight := (0, 0) (0.5, 1);
	TERM turnLeftSlow := (0.25, 0) (0.75, 1);
	TERM turnLeftMedium := (0.5, 0) (1, 1);
	
	METHOD : COG;
	DEFAULT := 0;
END_DEFUZZIFY

// Defuzzify output variable 'right_engine':
// 		{'bigRight', 'smallRight', 'zero', 'smallLeft', 'bigLeft'}
DEFUZZIFY right_engine
	TERM turnLeftMedium := (-1.0, 1) (-0.5, 0);
	TERM turnLeftSlow := (-0.75, 1) (-0.25, 0);
	TERM straight := (0, 0) (0.5, 1);
	TERM turnRightSlow := (0.25, 0) (0.75, 1);
	TERM turnRightMedium := (0.5, 0) (1, 1);
	
	METHOD : COG;
	DEFAULT := 0;
END_DEFUZZIFY

// Inference rules
RULEBLOCK rules
	AND : MIN; // Use 'min' for 'and'
	
	//
	RULE 0: IF left_sensor IS centred AND right_sensor IS centred
		THEN left_engine IS straight, right_engine IS straight;
	
	//
	RULE 1: IF left_sensor IS leftBig
		THEN left_engine IS turnRightSlow, right_engine IS turnRightMedium;
	
	RULE 2: IF right_sensor IS rightBig
		THEN right_engine IS turnLeftSlow, left_engine IS turnLeftMedium;

	
END_RULEBLOCK

END_FUNCTION_BLOCK